(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< x (car set)) (cons x set))
        ((= x (car set)) set)
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

(adjoin-set 0 '(1 3 5 7 9))             ; => (0 1 3 5 7 9)
(adjoin-set 4 '(1 3 5 7 9))             ; => (1 3 4 5 7 9)
(adjoin-set 7 '(1 3 5 7 9))             ; => (1 3 5 7 9)
(adjoin-set 10 '(1 3 5 7 9))            ; => (1 3 5 7 9 10)
